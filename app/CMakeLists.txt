cmake_minimum_required(VERSION 3.29 FATAL_ERROR)

set(PROJECT_NAME "GitQlient")

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS "-Wall -Werror -pedantic-errors -Wno-deprecated -Wno-deprecated-declarations")

execute_process(
   COMMAND
   git -C ${PROJECT_SOURCE_DIR} rev-parse --short HEAD
   RESULT_VARIABLE
   GQ_SHA_RESULT
   OUTPUT_VARIABLE
   GQ_SHA
   OUTPUT_STRIP_TRAILING_WHITESPACE
)

if (NOT DEFINED VERSION OR "${VERSION}" STREQUAL "")
   set(VERSION ${GQ_SHA})
endif()

add_compile_definitions(SHA_VER="${GQ_SHA}")
add_compile_definitions(VER="${VERSION}")
add_compile_definitions(QT_DEPRECATED_WARNINGS)

if (NOT EXISTS "${PROJECT_SOURCE_DIR}/app/AuxiliarCustomWidgets/.git" OR
    NOT EXISTS "${PROJECT_SOURCE_DIR}/app/QLogger/.git" OR
    NOT EXISTS "${PROJECT_SOURCE_DIR}/app/QPinnableTabWidget/.git" OR
    NOT EXISTS "${PROJECT_SOURCE_DIR}/app/git/.git")
    message(STATUS "Submodule update:")
    execute_process(COMMAND git submodule update --init --recursive
                    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
                    RESULT_VARIABLE GIT_SUBMOD_RESULT)
    if(NOT GIT_SUBMOD_RESULT EQUAL "0")
        message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
    endif()
endif()

find_package(Qt6 COMPONENTS Core Widgets Network REQUIRED)

file(GLOB SRC_FILES
   ${MACOS_APP_ICON_GITQLIENT}
   GitQlient.qrc
   AuxiliarCustomWidgets/*.qrc
)

add_subdirectory(AuxiliarCustomWidgets)
add_subdirectory(aux_widgets)
add_subdirectory(big_widgets)
add_subdirectory(branches)
add_subdirectory(cache)
add_subdirectory(commits)
add_subdirectory(config)
add_subdirectory(diff)
add_subdirectory(git)
add_subdirectory(graph)
add_subdirectory(history)
add_subdirectory(QLogger)
add_subdirectory(QPinnableTabWidget)

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
   list(APPEND SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/resources/resources.rc")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(MACOSX_BUNDLE_ICON_FILE icon.icns)
    set(MACOS_APP_ICON_GITQLIENT "${PROJECT_SOURCE_DIR}/resources/icon.icns")
    set_source_files_properties(${MACOS_APP_ICON_GITQLIENT} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
endif()

qt_add_executable(
    ${PROJECT_NAME}
    main.cpp
    ${SRC_FILES})

target_link_libraries(
   ${PROJECT_NAME}
   PUBLIC
   Qt::Core
   Qt::Widgets
   Qt::Network
   AuxiliarCustomWidgets
   aux_widgets
   big_widgets
   branches
   cache
   commits
   config
   diff
   git
   history
   QLogger
   Graph
   QPinnableTabWidget
 )

if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        MACOSX_BUNDLE TRUE
        AUTOMOC TRUE
        AUTOUIC TRUE
        AUTORCC TRUE
        MACOSX_BUNDLE_INFO_PLIST "${CMAKE_CURRENT_SOURCE_DIR}/resources/Info.plist"
    )
else()
    set_target_properties(${PROJECT_NAME} PROPERTIES
        WIN32_EXECUTABLE TRUE
        AUTOMOC TRUE
        AUTOUIC TRUE
        AUTORCC TRUE
    )
endif()

qt_add_resources(${PROJECT_NAME} "translations"
    PREFIX "/i18n"
    BASE "${CMAKE_CURRENT_SOURCE_DIR}"
    FILES "resources/translations/gitqlient_en.qm" "resources/translations/gitqlient_zh_CN.qm"
)

# Setting CPack variables

set(CPACK_OUTPUT_FILE_PREFIX ${CMAKE_BINARY_DIR}/packages)
set(CPACK_PACKAGE_CONTACT "Francesc M. <francescmm@gmail.com>")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "GitQlient is a multi-platform Git client written in C++ and Qt")
set(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME};${PROJECT_NAME}")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR "${PROJECT_NAME}")
set(CPACK_PACKAGE_VERSION "${VERSION}")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
set(CPACK_CREATE_DESKTOP_LINKS cmake-gui)


if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
   target_link_options(${PROJECT_NAME} PUBLIC "-no-pie")

   set(CPACK_PACKAGING_INSTALL_PREFIX "/usr")
   set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install/usr)

   install(
      FILES ${CMAKE_BINARY_DIR}/app/${PROJECT_NAME}
      DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
      RENAME "gitqlient"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/gitqlient.desktop
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/applications"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo.svg
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps"
      RENAME "gitqlient.svg"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo16.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/16x16/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo24.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/24x24/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo32.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/32x32/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo48.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/48x48/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo64.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/64x64/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo96.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/96x96/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo128.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/128x128/apps"
      RENAME "gitqlient"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo256.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/256x256/apps"
      RENAME "gitqlient.png"
   )
   install(
      FILES ${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo512.png
      DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/512x512/apps"
      RENAME "gitqlient.png"
   )

   # DEB-specific configuration
    set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Francesc M.")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libqt6core6, libqt6widgets6, libqt6network6")
    set(CPACK_DEBIAN_PACKAGE_HOMEPAGE "https://github.com/francescmm/GitQlient")
    set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
    set(CPACK_DEBIAN_PACKAGE_SECTION "devel")
    set(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})

    # RPM-specific configuration
    set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
    set(CPACK_RPM_PACKAGE_LICENSE "LGPLv2.1+")
    set(CPACK_RPM_PACKAGE_GROUP "Development/Tools")
    set(CPACK_RPM_PACKAGE_REQUIRES "qt6-qtbase, qt6-qtbase-gui, qt6-qtbase-network")
    set(CPACK_RPM_PACKAGE_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
    set(CPACK_RPM_PACKAGE_RELOCATABLE OFF)

    # Enable both generators
     set(CPACK_GENERATOR "DEB;RPM")

     include(CPack)

elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
   set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)
   install(
       TARGETS ${PROJECT_NAME}
       RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
       BUNDLE DESTINATION "${CMAKE_INSTALL_PREFIX}"
       LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}"
   )
elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
   include(InstallRequiredSystemLibraries)

   set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)
   install(
       TARGETS ${PROJECT_NAME}
       RUNTIME DESTINATION .
       BUNDLE DESTINATION "${CMAKE_INSTALL_PREFIX}"
       LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}"
   )

   set(CPACK_GENERATOR "NSIS")
   set(CPACK_NSIS_DISPLAY_NAME "${PROJECT_NAME}")
   set(CPACK_NSIS_PACKAGE_NAME "${PROJECT_NAME}")
   set(CPACK_NSIS_MUI_ICON "${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo.ico")
   set(CPACK_NSIS_MUI_UNIICON "${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/GitQlientLogo.ico")
   set(CPACK_NSIS_INSTALLED_ICON_NAME "${PROJECT_NAME}.exe")
   set(CPACK_NSIS_CREATE_ICONS_EXTRA "CreateShortCut '\\$SMPROGRAMS\\\\${PROJECT_NAME}\\\\${PROJECT_NAME}.lnk' '\\$INSTDIR\\\\${PROJECT_NAME}.exe'")
   set(CPACK_NSIS_DELETE_ICONS_EXTRA "Delete '\\$SMPROGRAMS\\\\${PROJECT_NAME}\\\\${PROJECT_NAME}.lnk'\\nRMDir '\\$SMPROGRAMS\\\\${PROJECT_NAME}'")
   include(CPack)

endif()
